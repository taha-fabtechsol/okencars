# Generated by Django 4.0.2 on 2024-06-08 16:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('dp', models.ImageField(upload_to='users_dp/')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Owner', 'Owner'), ('Manager', 'Manager'), ('Driver', 'Driver')], default='Driver', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=25, null=True)),
                ('street_address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state_province', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('license_number', models.CharField(blank=True, max_length=50, null=True)),
                ('license_issuing_country', models.CharField(blank=True, max_length=100, null=True)),
                ('license_expiry_date', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('year', models.IntegerField()),
                ('vin', models.CharField(max_length=17, unique=True)),
                ('license_plate_number', models.CharField(max_length=20, unique=True)),
                ('category', models.CharField(choices=[('Sedan', 'Sedan'), ('SUV', 'SUV'), ('Truck', 'Truck')], max_length=5)),
                ('number_of_seats', models.IntegerField()),
                ('transmission_type', models.CharField(choices=[('Automatic', 'Automatic'), ('Manual', 'Manual')], max_length=9)),
                ('fuel_type', models.CharField(choices=[('Gasoline', 'Gasoline'), ('Diesel', 'Diesel'), ('Electric', 'Electric')], max_length=8)),
                ('mileage', models.IntegerField()),
                ('color', models.CharField(max_length=50)),
                ('rental_price_per_day', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location_pickup', models.CharField(max_length=255)),
                ('location_dropoff', models.CharField(max_length=255)),
                ('availability_dates_from', models.DateField(blank=True, null=True)),
                ('availability_dates_to', models.DateField(blank=True, null=True)),
                ('additional_features', models.TextField(blank=True, null=True)),
                ('insurance_provider', models.CharField(max_length=255)),
                ('insurance_policy_number', models.CharField(max_length=255)),
                ('insurance_expiry_date', models.DateField()),
                ('coverage_type', models.CharField(choices=[('Comprehensive', 'Comprehensive'), ('Collision', 'Collision'), ('Liability', 'Liability')], max_length=13)),
                ('coverage_limits', models.CharField(choices=[('Bodily Injury', 'Bodily Injury'), ('Property Damage', 'Property Damage')], max_length=15)),
                ('deductible_amount', models.PositiveIntegerField()),
                ('roadside_assistance', models.BooleanField(default=False)),
                ('rental_car_reimbursement', models.BooleanField(default=False)),
                ('additional_insured_drivers', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
    ]
